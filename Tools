def createFilter(size: Int, value: Int) :Array[Array[Int]] = {
   
   //Returns the height and width of the matrix
   val arraySize = if (size%2 == 0 && size > 0) size + 1 else if (size%2 == 1 && size > 0) size else 1
   
   val newMatrix = Array.ofDim[Int](arraySize, arraySize)
   
   if (size%2 == 1) {
    for {
      y <- 0 until arraySize
      x <- 0 until arraySize
    } {
      newMatrix(x)(y) = value
    }     
   } else {
    for {
      y <- 0 until arraySize
      x <- 0 until arraySize
    } {
      if ( (abs(arraySize/2-x) + abs(arraySize/2-y)) <= arraySize/2 ) newMatrix(x)(y) = value
    }
   }
   
   newMatrix
 } 
  
 
 def multiplyWithFilter(
   x: Int,
   y: Int,
   image: Image,
   filter: Array[Array[Int]],
   divisor: Int): Color = {
   
   //a filter is always a square so length is width and height
   val length = filter(0).length
   val data = image.data
   
   //A compiler
   var newColor = Color(0,0,0)
   
   //length/2 maps the matrix's size
    for {
      yImg <- (y - length/2) to (y + length/2)
      xImg <- (x - length/2) to (x + length/2)
    } {
      
      val colorTimesCoefficient = data(yImg)(xImg).*(filter(y + length/2 - yImg)((x + length/2 - xImg)))
      
      newColor = newColor.+(colorTimesCoefficient)
    }     
    
   Color(newColor.r/divisor, newColor.g/divisor, newColor.b/divisor).clamp
   
 }

 
 def pad(data: Array[Array[Color]], border: Int):  Array[Array[Color]] = {
      
   var padded = data
   
   //This for- loop adds border-times additional layers to the top and bottom of the pic essentially
   // making it a little "taller". padded += padded(0) The idea
   for (i <- 0 until border) {
     padded = padded.head +: padded
     padded = padded.reverse
     padded = padded.head +: padded
     padded = padded.reverse
   }
   
   //for every horizontal vaaka pixel line
   for (y <- 0 until padded.length) {
     def head = padded(y)(0)
     
     //pads the heads of all of the horizontal lines (left ends)
     for (iteration <- 1 to border) {
       padded(y) = head +: padded(y)
     }
     
     //Mirrors the padded by the y-axle.
     padded = padded.map(_.reverse)
     
     //pades the right side of the picture
     for (iteration <- 1 to border) {
       padded(y) = head +: padded(y)
     }
     
     //mirrors the picture back to normal
     padded = padded.map(_.reverse)
   }

  padded
 }
